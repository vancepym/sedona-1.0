//
// Copyright (c) 2007 Tridium, Inc
// Licensed under the Academic Free License version 3.0
//
// History:
//   10 Jan 07  Andy Saunders  Creation
//   27 Apr 07  Brian Frank    Port from Java to Sedona
//   22 Apr 09  Elizabeth McKenney   Updated
//

**
** Avg Running Average math object
**
** out = (sum last 10 value)/10
** 
** Samples current value again if value has not changed in maxTime msec
**
@niagaraIcon="module://icons/x16/control/math/average.png"
class Avg10
  extends Component
{
  @readonly property float out
  property float in
  @config property int maxTime = 0

  **
  ** Callback when component is first started in an app.
  **
  virtual override void start()
  {
    // Initialize all samples with initial input value
    for (int i = 0; i < 10; i++) samples[i] = in

    total = in * 10.0f
    index = 0
    maxSampleTime = (long)maxTime * 1ms
    lastValue = in
  }


  **
  ** Execute is called once every scan.
  **
  virtual override void execute()
  {
    float cv = in
    bool forceSample = false
    long now = Sys.ticks()

    // If max sample time is exceeded, process new sample even if input is unchanged
    if (maxTime > 0)
    {
      forceSample = (now - lastSampleTime) >= maxSampleTime
    }

    if ((cv != lastValue) || forceSample)
    {
      // Remove oldest sample from total and add current sample
      total = total - samples[index] + cv
      samples[index] = cv

      // Move to next oldest sample
      if (++index >= 10) index = 0

      lastValue = cv
      lastSampleTime = now
    }
    
    out = total / 10.0f
  }

  **
  ** Behavior to execute when a property is changed externally
  ** 
  override void changed(Slot slot)
  {
    super.changed(slot)

    // If maxTime state changes at runtime, update private (long) copy
    if (slot == Avg10.maxTime)
    {
      maxSampleTime = (long)maxTime * 1ms
    }
  }


  private float  total = 0.0
  private float  lastValue
  private int    index = -1
  private long   lastSampleTime = 0L
  private long   maxSampleTime  = 0L
  private inline float[10] samples

}
