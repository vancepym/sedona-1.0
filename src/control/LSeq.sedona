//
// Copyright (c) 2007 Tridium, Inc
// Licensed under the Academic Free License version 3.0
//
// History:
//   18 Jan 07  Andy Saunders  Creation
//   27 Apr 07  Brian Frank    Port from Java to Sedona
//   22 Apr 09  Elizabeth McKenney   Updated
//

**
** LSeq will provide a linear sequence of 2 to 16 loads based on a 0 - 100 input.
**
** Analogous to a bar graph of the input value, where the delta represented by each 
** output is (inMax - inMin) / numOuts.  So given an input value V, outputs 1 through 
** (V - inMin)/delta will be set true, and any remaining outputs will be false.
**
@niagaraIcon="module://icons/x16/control/control.png"
class LSeq
  extends Component

{
  property float in                               // cv input

  @config property float inMin = 0.0     // expected input minimum
  @config property float inMax = 100.0f  // expected input maximum
  @config property int numOuts = 16      // number of outputs to control over range

  @readonly property byte dOn  = 0                // number of outputs currently turned on
  @readonly property bool ovfl = false            // true when in > inMax

  @readonly property bool out1
  @readonly property bool out2
  @readonly property bool out3
  @readonly property bool out4
  @readonly property bool out5
  @readonly property bool out6
  @readonly property bool out7
  @readonly property bool out8
  @readonly property bool out9
  @readonly property bool out10
  @readonly property bool out11
  @readonly property bool out12
  @readonly property bool out13
  @readonly property bool out14
  @readonly property bool out15
  @readonly property bool out16


  **
  ** Callback when component is first started in an app.
  **
  virtual override void start()
  {
    updateDelta()
  }

  **
  ** Execute is called once every scan.
  **
  virtual override void execute()
  {
    int numStagesOn = (int)((in-inMin)/spDelta)

    // Loop through out1 - out16 setting desired state for each
    //  (Note assumption that output slot ids are consecutive)
    for (int i = 0; i < 16; i++)
    {
      setBool(type.slots[LSeq.out1.id+i], ((i+1) <= numStagesOn))
    }

    dOn  = numStagesOn
    ovfl = in > inMax
  }


  **
  ** Behavior to execute when a property is changed externally
  ** 
  override void changed(Slot slot)
  {
    super.changed(slot)

    if ((slot == LSeq.inMin)  || (slot == LSeq.inMax))
    {
      updateDelta()
    }
  }


  private void updateDelta()
  {
    spDelta = (inMax - inMin) / (float)numOuts
  }


  private float spDelta

}
