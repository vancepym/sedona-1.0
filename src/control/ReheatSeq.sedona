//
// Copyright (c) 2007 Tridium, Inc
// Licensed under the Academic Free License version 3.0
//
// History:
//   18 Jan 07  Andy Saunders  Creation
//   27 Apr 07  Brian Frank    Port from Java to Sedona
//   22 Apr 09  Elizabeth McKenney   Updated
//   22 Jul 09  Adapted from ReheatSeq from LSeq class
//

**
** LSeq will provide a linear sequence of up to 4 loads based on configurable thresholds
**
** Analogous to a bar graph of the input value, where the delta represented by each 
** output is (inMax - inMin) / numOuts.  So given an input value V, outputs 1 through 
** (V - inMin)/delta will be set true, and any remaining outputs will be false.
**
@niagaraIcon="module://icons/x16/control/util/step.png"
class ReheatSeq
  extends Component

{
  property float in                               // cv input
  @config property bool enable           // all outputs are false if enable == false
  @readonly property byte dOn  = 0                // number of outputs currently turned on
  @config property float hysteresis
  @config property float threshold1
  @config property float threshold2
  @config property float threshold3
  @config property float threshold4
  @readonly property bool out1
  @readonly property bool out2
  @readonly property bool out3
  @readonly property bool out4


  **
  ** Execute is called once every scan.
  **
  virtual override void execute()
  {
    int numStagesOn = 0
    if(!enable)
    {
    	out1=false
    	out2=false
    	out3=false
    	out4=false
    	dOn=0
    	return
    }

    // Loop through out1 - out16 setting desired state for each
    //  (Note assumption that output slot ids are consecutive)
    for(int i = 0; i < 4; i++)
    {
    	if(getBool(type.slots[ReheatSeq.out1.id+i]))
    	{
    		if((in + hysteresis) >= getFloat(type.slots[ReheatSeq.threshold1.id+i]))
          numStagesOn++
    		else
          setBool(type.slots[ReheatSeq.out1.id+i],false)
    	}
    	else
    	{
    		if(in >= getFloat(type.slots[ReheatSeq.threshold1.id+i]))
    		{
    			setBool(type.slots[ReheatSeq.out1.id+i],true)
    			numStagesOn++
    		}
    	}
    }

    dOn  = numStagesOn
  }
  
}
