//
// Copyright (c) 2009 Tridium, Inc
// All Rights Reserved.
//
// History:
//   03 Feb 2009  Dan Giorgis   creation
//

**
**  LocalDateTime represents a local date/time in terms of year, month, day, 
**  etc
** 
final class LocalDateTime
{   
  **
  **  Initialize a LocalDateTime given nanoseconds since epoch.
  ** 
  **  Return -1 if parameters are out of range
  **  
  static int make(long nanos, LocalDateTime local, long utcOffset, bool isDst)
  {  	

    //  Range check
    if ((nanos < 0L) || (nanos > DateTime.nanosMax))
      return -1;
       
    //  Determine year    
    long rem = nanos;
    int year = 0;    
    for(;;)
    {   	
      long nanosInYear = DateTime.isLeapYear(year+2000) ? 366days : 365days;    
      if (rem < nanosInYear)
        break;
      year++;     	   
      rem -= nanosInYear;            	          	   
    } 	    	
    
    //  Adjust for utcOffset and dst 
    rem += utcOffset;
    if (isDst)
      rem += 1hr;
    
  	//  Determine month 
  	int month = 0;
    for (;;)
    {
      long nanosInMonth = (long)DateTime.daysPerMonth[month] * 1days;
      if ((month == 1) && DateTime.isLeapYear(year+2000))
        nanosInMonth += 1days;       

      if (rem < nanosInMonth)
        break;      

      rem -= nanosInMonth;           
      month++;
    }
   
    local.year = year;
    local.month = month;
    local.day = (int)(rem / 1days) + 1; rem %= 1days;  // days are 1-based
    local.hour = (int)(rem / 1hr); rem %= 1hr
    local.minute = (int)(rem / 1min); rem %= 1min;
    local.second = (int)(rem / 1sec); rem %= 1sec;
    local.nanosecond = rem;
    
    return 0;
  }         
  
  **
  **  Returns year
  ** 
  int getYear() { return year + 2000 }

  **
  **  Returns month, 0-11
  ** 
  int getMonth() { return month }

  **
  **  Returns day of month (1-based)
  ** 
  int getDay()    { return day }
    
  **
  **  Returns hour of day
  ** 
  int getHour()   { return hour }

  **
  **  Returns minute of hour
  ** 
  int getMinute() { return minute }

  **
  **  Returns seconds
  ** 
  int getSecond() { return second }

  **
  **  Returns fractional seconds in nanoseconds
  ** 
  long getNanosecond() { return nanosecond }
  
  //  FIXX - these could be packed 
  int year;
  int month; 
  int day;
  int hour;
  int minute
  int second;
  long nanosecond;
  
}


  
 
  
    



