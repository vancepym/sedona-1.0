//
// Copyright (c) 2009 Tridium, Inc
// Licensed under the Academic Free License version 3.0
//
// History:
//   19 May 09  Brian Frank   Creation
//

**
** FileStore is used to implement the backing storage of File 
** based I/O.  Typically each storage device such as static 
** RAM or EEPROM implements a subclass of FileStore and declares
** a singleton called "instance".  Files are mapped to a FileStore
** instance by 'PlatformServcie.fileStore'.
**                 
class FileStore extends Virtual
{                      

  **
  ** Built-in system file storage implementation.
  **
  static inline FileStore sys

  **
  ** Implementation for 'File.size'.  
  ** Must work without opening the file.
  **
  virtual int size(File f) 
  {
    return doSize(f.name)
  }

  **
  ** Implementation for 'File.open'.
  **
  virtual bool open(File f, Str mode) 
  { 
    f.fp = doOpen(f.name, mode)
    return f.fp != null
  }

  **
  ** Implementation for 'File.out.flush'.
  **
  virtual void flush(File f) 
  { 
    doFlush(f.fp) 
  }

  **
  ** Implementation for 'File.close'.
  **
  virtual bool close(File f) 
  { 
    bool ok = doClose(f.fp)  
    f.fp = null
    return ok
  }
  
  **
  ** Implementation for 'File.tell'.
  **
  virtual int tell(File f) 
  { 
    return doTell(f.fp)
  }  

  **
  ** Implementation for 'File.seek'.
  **
  virtual bool seek(File f, int pos)
  { 
    return doSeek(f.fp, pos)
  }  
  
  **
  ** Implementation for 'File.in.read'.
  **
  virtual int read(File f) 
  { 
    return doRead(f.fp)
  }

  **
  ** Implementation for 'File.in.readBytes'.
  **
  virtual int readBytes(File f, byte[] b, int off, int len) 
  {
    return doReadBytes(f.fp, b, off, len)
  }

  **
  ** Implementation for 'File.out.write'.
  **
  virtual bool write(File f, int b)
  {
    return doWrite(f.fp, b)
  }

  **
  ** Implementation for 'File.out.writeBytes'.
  **
  virtual bool writeBytes(File f, byte[] b, int off, int len)
  {
    return doWriteBytes(f.fp, b, off, len)
  }

  **
  ** Rename a file. Return true on success, false on failure.
  **
  native static bool rename(Str from, Str to)
  

  internal native static int doSize(Str name)
  internal native static Obj doOpen(Str name, Str mode)
  internal native static int doRead(Obj fp)
  internal native static int doReadBytes(Obj fp, byte[] b, int off, int len)
  internal native static bool doWrite(Obj fp, int b)
  internal native static bool doWriteBytes(Obj fp, byte[] b, int off, int len)
  internal native static bool doSeek(Obj fp, int pos)
  internal native static int  doTell(Obj fp)
  internal native static void doFlush(Obj fp)
  internal native static bool doClose(Obj fp)
}


