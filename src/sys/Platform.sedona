//
// Copyright (c) 2007 Tridium, Inc
// Licensed under the Academic Free License version 3.0
//
// History:
//   4 Dec 07  Brian Frank  Create
//

**
** Platform models services of the underlying OS and hardware.
**
@niagaraIcon="module://icons/x16/platform.png"
class Platform
  extends Service
{ 

  **
  ** Get the platform identifier which defines how 
  ** this Sedona device should be provisioned.
  **
  virtual Str platformId() { return "unknown" }     

  **
  ** Lookup a string platform configuration option. 
  **       
  virtual Str propStr(Str key, Str def) { return def }

  **
  ** Lookup an int platform configuration option. 
  **       
  virtual int propInt(Str key, int def) { return def }

  **
  ** Initialize the platform with the specified command 
  ** line arguments.  Return 0 on success.  Return non-zero
  ** on failure, which will terminate the process.
  **
  virtual int init(Str[] args, int argsLen) { return 0 }

  **
  ** Restart this Sedona application on the host platform.
  ** This typically means restart just the Sedona process.
  **
  virtual void restart() {}

  **
  ** Restart the entire host platform.  This typically 
  ** means to reboot the entire operating sytem.
  **
  virtual void reboot() {}
  
  **
  ** Notify the platform of a name/value pair setting
  ** or state change.
  **
  virtual void notify(Str key, Str val) {}
     
  **
  ** Return max allowed file size, given file name.
  **
  virtual int maxFileSize(Str fname) { return Sys.maxInt }
     
  **
  ** Return available runtime memory, in bytes
  **
  virtual long memAvailable() { return 0L }
     
}
